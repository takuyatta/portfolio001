const titleTexts=document.querySelectorAll('.observe-txt');const borders=document.querySelectorAll('.observe-border');const generals=document.querySelectorAll('.observe-gen');const copyTexts=document.querySelectorAll('.observe-copy');const icons=document.querySelectorAll('.observe-icon');const pics=document.querySelectorAll('.hover-darken');const cb=function(entries,observer){entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add('inview');observer.unobserve(entry.target)}})}
const options={rootMargin:"-20% 0px 0px 0px",};const io=new IntersectionObserver(cb,options);titleTexts.forEach(titleText=>io.observe(titleText));borders.forEach(border=>io.observe(border));generals.forEach(general=>io.observe(general));copyTexts.forEach(copyText=>io.observe(copyText));icons.forEach(icon=>io.observe(icon));pics.forEach(pic=>io.observe(pic));const headerLine=document.querySelector('.top');const headerFilm=function(entries,observer){entries.forEach(entry=>{if(entry.isIntersecting){document.querySelector('.header__back-film').classList.remove('enter')}else{document.querySelector('.header__back-film').classList.add('enter')}})}
const headerOptions={rootMargin:"-8% 0px 0px 0px",};const bridge_io=new IntersectionObserver(headerFilm,headerOptions);bridge_io.observe(headerLine)